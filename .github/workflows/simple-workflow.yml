# This is a basic workflow to help you get started with Actions

name: WinGet

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v2

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        shell: pwsh
        run: |
          $workingDir = Get-Location
          $ErrorActionPreference = 'Continue'
          git clone https://github.com/microsoft/winget-pkgs.git
          Write-Host "Counting Download URLs..."
          "Counting Download URLs..." | Out-File -Append -FilePath $workingDir/a-myScript.txt
          $DownUrls = 0
          Foreach($a in (Get-ChildItem -Path "$workingDir/winget-pkgs/manifests" -Directory -Recurse | Where-Object { (Get-ChildItem -Directory -Path $_).Count -eq 0 } | Select-Object FullName | Sort-Object)) { $DownUrls += (Get-ChildItem -Path $a.FullName).Count -eq 1 ? 1 : (Get-Content (Get-ChildItem -Path $a.FullName -Filter "*installer*" | Select-Object FullName).FullName | Select-String -Pattern "InstallerUrl:").Count }
          Write-Host "Total Download Urls`: $DownUrls"
          "Total Download Urls`: $DownUrls" | Out-File -Append -FilePath $workingDir/a-myScript.txt
          Write-Host "Checking Codes for Download URLs..."
          "Checking Codes for Download URLs..." | Out-File -Append -FilePath $workingDir/a-myScript.txt
          Foreach($i in (Get-ChildItem -Path "$workingDir/winget-pkgs/manifests" -Directory -Recurse | Where-Object { (Get-ChildItem -Directory -Path $_).Count -eq 0 } | Select-Object FullName | Sort-Object)) { Foreach ($Url in (((Get-ChildItem -Path $i.FullName).Count -eq 1) ? (Get-Content (Get-ChildItem -Path $i.FullName | Select-Object FullName).FullName | Select-String -Pattern "InstallerUrl:") : (Get-Content (Get-ChildItem -Path $i.FullName -Filter "*installer*" | Select-Object FullName).FullName | Select-String -Pattern "InstallerUrl:") | Foreach-Object {$_.ToString().Trim().TrimStart('-').Trim().TrimStart("InstallerUrl: ").Trim('"').Trim("'").Trim()})) { $ResponseCode = curl -s -o /dev/null --max-time 3 -w "%{http_code}" $Url; if ($ResponseCode -notin @("302","200")) { "$ResponseCode`: $Url" | Out-File -Append -FilePath $workingDir/a-myScript.txt } } }
          Write-Host "Completed!"
          "Completed!" | Out-File -Append -FilePath $workingDir/a-myScript.txt
          
      - name: Save a-myScript.txt
        uses: actions/upload-artifact@v2
        with:
          name: a-myScript
          path: a-myScript.txt
